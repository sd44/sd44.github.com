"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-^d88!zr2n#rftg&tjokbtuk%-^no239a7w9hbmgqr!lm1b&_f5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['.localhost', '127.0.0.1', '[::1]']

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Ninja
    'ninja_extra',
    # 'ninja_jwt',
    "corsheaders",  # enable localhost:3000

    # my apps
    "books.apps.BooksConfig",
    "authninja.apps.AuthninjaConfig",

    # 自建用户模型
    'users',
    'seed',

    # allauth
    'allauth',
    'allauth.account',
    "allauth.headless",
    # Optional
    "allauth.mfa",
    "allauth.usersessions",
    # Optional -- requires install using `django-allauth[socialaccount]`.
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
]

# 自建用户模型
AUTH_USER_MODEL = 'users.MyUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",  # enable localhost and 127.0.0.1 
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # all auth
    "allauth.account.middleware.AccountMiddleware",
]

# 社交账户的电子邮件地址如与本地电子邮件地址相同，则视为登录至本地账户。
SOCIALACCOUNT_EMAIL_AUTHENTICATION = True
# 如果应用了电子邮件认证，此设置控制社交账号是否自动连接到本地账号。
SOCIALACCOUNT_EMAIL_AUTHENTICATION_AUTO_CONNECT = True

# Provider specific settings, 不能和admin panel一起使用
# SOCIALACCOUNT_PROVIDERS = {
#     'github': {
#         'SCOPE': [
#             'user',
#             'read:org',
#         ],
#         # For each OAuth based provider, either add a ``SocialApp``
#         # (``socialaccount`` app) containing the required client
#         # credentials, or list them here:
#         'APP': {
#             'client_id': 'Ov23li4Pp3Lzl4L7pnDY',
#             'secret': '94bce02ee0d581f1f0cc7b4d35993b1b442ac7d0',
#             'key': ''
#         }
#     },
#     'weixin': {
#         # For each OAuth based provider, either add a ``SocialApp``
#         # (``socialaccount`` app) containing the required client
#         # credentials, or list them here:
#         'AUTHORIZE_URL':
#         'https://open.weixin.qq.com/connect/oauth2/authorize',  # for media platform
#         'SCOPE': ['snsapi_base'],
#     }
# }

# DANGER: allow all origins
# CORS_ALLOW_ALL_ORIGINS: bool

CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
# CORS_ALLOWED_ORIGINS_REGEXES = [
#     r"^http://localhost:\d+$",
#     r"^http://127\.0\.0\.1:\d+$",
# ]

from corsheaders.defaults import default_headers

CORS_ALLOW_HEADERS = (
    *default_headers,
    "x-session-token",
    "x-email-verification-key",
    "x-password-reset-key",
)

CORS_ALLOW_CREDENTIALS = True

# CSRF_TRUSTED_ORIGINS: list of strings
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]

# 一些教程推荐开发环境设置如下内容，但实际上并不必要。
# https://pypi.org/project/django-cors-headers/
# SESSION_COOKIE_SAMESITE = 'None'  # Allow cross-site cookies
# CSRF_COOKIE_SAMESITE = 'None'  # Allow cross-site CSRF cookies
# CSRF_COOKIE_SECURE = False  # 开发时关闭CSRF保护，避免跨域问题；生产环境中https应设置为True

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# # JWT settings.py

# from datetime import timedelta

# NINJA_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=15),
#     # https://auth0.com/docs/secure/tokens/token-best-practices
#     # 不推荐使用HS256算法
#     'ALGORITHM': 'RS256',
#     'SIGNING_KEY': open(BASE_DIR / 'django-private.pem',
#                         'r').read(),  # Replace with your private key path
#     'VERIFYING_KEY': open(BASE_DIR / 'django-public.pem',
#                           'r').read(),  # Replace with your public key path
# }

# Email settings # https://docs.djangoproject.com/en/5.2/topics/email/
DEFAULT_FROM_EMAIL = "25931014@qq.com"
EMAIL_HOST = "smtp.qq.com"
EMAIL_PORT = 465
EMAIL_USE_SSL = True
EMAIL_HOST_USER = "25931014@qq.com"
EMAIL_HOST_PASSWORD = "vscsepqjhcvbcagc"

# https://docs.allauth.org/en/latest/account/advanced.html
# if you want to use a custom user model that has email as the identifying
# field, and you don’t want to collect usernames, you need the following in
# your settings.py:
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
# 标有星号的字段（例如 'username*'）为必填字段
ACCOUNT_SIGNUP_FIELDS = ['email*', 'password1*', 'password2*', 'fullname']
# 可选是否验证邮件 https://docs.allauth.org/en/latest/account/configuration.html
ACCOUNT_EMAIL_VERIFICATION = "optional"
ACCOUNT_LOGIN_METHODS = {"email"}
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = False
# Magic Code Login, 用户无需输入电子邮件地址和随附的密码，而只需输入电子邮件地址。
# 然后，将向该电子邮件地址发送一个一次性代码用于登录.
ACCOUNT_LOGIN_BY_CODE_ENABLED = True
# 控制是通过点击电子邮件中的链接 （False） 还是通过输入代码 （True） 来执行电子邮件验证。
# ACCOUNT_EMAIL_VERIFICATION_BY_CODE_ENABLED = ['password', 'mfa', 'socialaccount']
ACCOUNT_EMAIL_VERIFICATION_BY_CODE_ENABLED = False
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True

HEADLESS_ONLY = True
HEADLESS_FRONTEND_URLS = {
    "account_confirm_email":
    "http://localhost:3000/account/verify-email/{key}",
    "account_reset_password":
    "http://localhost:3000/account/password/reset",
    "account_reset_password_from_key":
    "http://localhost:3000/account/password/reset/key/{key}",
    "account_signup":
    "http://localhost:3000/account/signup",
    # 社交登录错误回调，直接指向前端错误页面
    "socialaccount_login_error":
    "http://localhost:3000/auth/social/callback?error={error_message}",
}

HEADLESS_SERVE_SPECIFICATION = True
HEADLESS_SPECIFICATION_TEMPLATE_NAME = "headless/spec/swagger_cdn.html"
# HEADLESS_SPECIFICATION_TEMPLATE_NAME = "headless/spec/redoc_cdn.html"
MFA_SUPPORTED_TYPES = ["totp", "recovery_codes", "webauthn"]
MFA_SUPPORTED_TYPES = []
MFA_PASSKEY_LOGIN_ENABLED = False
MFA_PASSKEY_SIGNUP_ENABLED = False
